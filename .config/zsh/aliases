#!/bin/zsh
alias sudo="sudo "
# ls
case $(uname -s) in
	Darwin | FreeBSD)
		alias ls="ls -Ghp"
		alias ll="ls -lAtr -D %Y-%m-%dT%H:%M:%S"
		;;
	Linux)
		alias ls="ls --color -hp"
		alias ll="ls -lAtr --time-style=+%Y-%m-%dT%H:%M:%S"
		;;
esac
alias gp="grep -E -inH --color=auto"
alias df="df -ha"
alias cp="cp -v"
alias mv="mv -v"
alias tmuxl="tmux ls"
alias tmuxa="tmux attach -t"
alias tmuxk="tmux kill-session -t"
alias tmuxs="tmux new-session -s"
alias hg='history 0 | awk '\''{for (i=2; i<NF; i++) printf "%s ", $i; print $NF}'\'' | grep -E --color=auto'

function ff { ll $1 | awk -v name="$2" 'tolower($NF) ~ name {print}' }
function ffind { find $1 -type f -exec grep -F -inH --color=auto $2 {} + 2> /dev/null }
function efind { find $1 -type f -exec grep -E -inH --color=auto $2 {} + 2> /dev/null }

function tping { ping "$@" | while read pong; do echo "$(date +'%T'): $pong"; done }
function tping6 { ping6 "$@" | while read pong; do echo "$(date +'%T'): $pong"; done }

alias bsp="birdc show protocol"
alias bsp6="birdc6 show protocol"
alias bsr="birdc show route"
alias bsr6="birdc6 show route"

function ifconfig {
PYTHON_ARG="$@" python3 - <<END
import os
import re
import subprocess
def mask_hex_to_length(h):
	return bin(int(h, 16)).count("1")
args = os.environ["PYTHON_ARG"]
cmd = f"/sbin/ifconfig {args}"
output = subprocess.run(cmd.split(), stdout=subprocess.PIPE, encoding="utf-8")
if output.stdout:
	regex = re.compile(r"(netmask) (0x[0-9a-f]{8})")
	print(regex.sub(lambda m: f"{m.group(1)} {mask_hex_to_length(m.group(2))}", output.stdout), end="")
END
}

if [ $(uname -s) = "Darwin" ] || [ $(uname -s) = "FreeBSD" ]; then
function mping {
PYTHON_ARG="$@" python3 - <<END
"""
There's ping and ping6 for BSD. Let's solve this unpleasantness.
"""
import sys
import os
import subprocess
import ipaddress
import re

class Host:
	def __init__(self, target):
		self.target = target
		self.ip_addr = None
		self.addresses = None
		self.fqdn = None
		self.dns_output = ""
		self.dns_cmd = ""
		try:
			self.ip_addr = ipaddress.ip_address(self.target)
		except ValueError:
			self.fqdn = target
		else:
			self.addresses = []
			self.addresses.append(ipaddress.ip_address(self.target))

		if self.fqdn is not None:
			self.addresses, self.dns_output = self.resolve_fqdn()

	def resolve_fqdn(self):
		result = ""
		# Don't use ANY
		for type_ in ("A", "AAAA"):
			cmd = f"dig -t {type_} +noall +answer {self.fqdn}"
			result += "> " + cmd + "\n"
			output = subprocess.run(cmd.split(), stdout=subprocess.PIPE, encoding="utf-8")
			result += output.stdout + "\n"
		regex = re.compile(r"IN\t(A|AAAA)\t(?P<ip>.*)")
		addresses = []
		for line in result.split("\n"):
			line = line.strip()
			if m := regex.search(line):
				ip_obj = ipaddress.ip_address(m.group("ip"))
				addresses.append(ip_obj)
		return addresses, result.strip()

	def get_ip_address(self, version = None):
		version_dict = {"4": ipaddress.IPv4Address, "6": ipaddress.IPv6Address}
		if not self.addresses:
			return None
		if version is None:
			return self.addresses[0]
		for addr in self.addresses:
			if isinstance(addr, version_dict[version]):
				return str(addr)

def route(args):
	args = args.split()
	target = args.pop()
	host = Host(target)
	cmds = []
	if host.get_ip_address() is None:
		raise ValueError(f"Couldn't resolve {host.target}\n{host.dns_output}")
	if "-4" in args:
		ip = host.get_ip_address("4")
		if ip is None:
			raise ValueError(f"{host.target} doesn't have IPv4 address\n{host.dns_output}")
		args.remove("-4")
		cmd = f"ping {' '.join(i for i in args)}"
		cmds.append((cmd, ip))
	elif "-6" in args:
		ip = host.get_ip_address("6")
		if ip is None:
			raise ValueError(f"{host.target} doesn't have IPv6 address\n{host.dns_output}")
		args.remove("-6")
		cmd = f"ping6 {' '.join(i for i in args)}"
		cmds.append((cmd, ip))
	else:
		ipv6 = host.get_ip_address("6")
		ipv4 = host.get_ip_address("4")
		if not (ipv6 or ipv4):
			raise ValueError(f"{host.target} doesn't have an IP address")

		if ipv6:
			cmd = f"ping6 {' '.join(i for i in args)}"
			cmds.append((cmd, ipv6))
		if ipv4:
			cmd = f"ping {' '.join(i for i in args)}"
			cmds.append((cmd, ipv4))

	return host, cmds

def main(args):
	try:
		host, cmds = route(args)
		print(host.dns_output)
	except ValueError as e:
		sys.exit(e)
	for cmd, ip in cmds:
		cmd = f"{cmd} {ip}"
		print(f"> {cmd}")
		try:
			result = subprocess.run(cmd.split(), stderr=subprocess.PIPE, encoding="utf-8")
			if result.stderr:
				print(result.stderr)
			if result.returncode == 0:
				break
		except KeyboardInterrupt:
			sys.exit()

if __name__ == "__main__":
	main(os.environ["PYTHON_ARG"])
END
}
fi

mdig () {
	digall_color_restore='\033[0m'
	digall_color_light_green='\033[1;32m'
	digall_color_light_blue='\033[1;34m'
	digall_color_light_cyan='\033[1;36m'
	# Don't use ANY
	for t in A AAAA NS; do
		cmd="dig -t $t +noall +answer "$@""
		echo "${digall_color_light_green}$t:${digall_color_restore}${digall_color_light_cyan}"
		eval "$cmd"
		echo "${digall_color_restore}"
	done
}

ssh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
        tmux rename-window "$(echo $* | cut -d . -f 1)"
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh "$@"
    fi
}

alias cfg='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

[ "$EDITOR" = "nvim" ] && alias vim="nvim"
